{"version":3,"sources":["../../src/plugins/blockquote.js"],"names":["BLOCKQUOTE","BlockquotePlugin","props","DEFAULT_NODE","Plugin","Button","editorState","onChange","onClick","e","preventDefault","isActive","blocks","some","Boolean","document","getClosest","block","key","parent","type","change","unwrapBlock","wrapBlock","value","name","schema","nodes","plugins","typeDefault","toolbarButtons","deserialize","el","next","tagName","toLowerCase","object","childNodes","serialize","children","textAlign","data","get","renderNode","node"],"mappings":";;;;;;;AAuBA;;;;AACA;;;;AACA;;;;AAEA;;AACA;;;;;;;;;;;;+eA5BA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;AASO,IAAMA,kCAAa,uBAAnB;;IAEcC,gB;;;AACnB,4BAAYC,KAAZ,EAA0B;AAAA;;AAAA,oIAClBA,KADkB;;AAAA;;AAGxB,UAAKC,YAAL,GAAoBD,MAAMC,YAA1B;AAHwB;AAIzB;;AAED;;;;EAP4CC,gB;;;OAQ5CC,M,GAAS,gBAAsC;AAAA,QAAnCC,WAAmC,QAAnCA,WAAmC;AAAA,QAAtBC,QAAsB,QAAtBA,QAAsB;;AAC7C,QAAMC,UAAU,SAAVA,OAAU,IAAK;AACnBC,QAAEC,cAAF;;AAEA,UAAMC,WAAWL,YAAYM,MAAZ,CAAmBC,IAAnB,CAAwB;AAAA,eACvCC,QACER,YAAYS,QAAZ,CAAqBC,UAArB,CACEC,MAAMC,GADR,EAEE;AAAA,iBAAUC,OAAOC,IAAP,KAAgBpB,UAA1B;AAAA,SAFF,CADF,CADuC;AAAA,OAAxB,CAAjB;;AASA,UAAIqB,SAASf,YAAYe,MAAZ,EAAb;;AAEA,UAAIV,QAAJ,EAAc;AACZU,iBAASA,OAAOC,WAAP,CAAmBtB,UAAnB,CAAT;AACD,OAFD,MAEO;AACLqB,iBAASA,OAAOE,SAAP,CAAiBvB,UAAjB,CAAT;AACD;;AAEDO,eAAS,EAAEiB,OAAOH,OAAOG,KAAhB,EAAT;AACD,KArBD;;AAuBA,QAAMb,WAAWL,YAAYM,MAAZ,CAAmBC,IAAnB,CAAwB;AAAA,aACvCC,QACER,YAAYS,QAAZ,CAAqBC,UAArB,CACEC,MAAMC,GADR,EAEE;AAAA,eAAUC,OAAOC,IAAP,KAAgBpB,UAA1B;AAAA,OAFF,CADF,CADuC;AAAA,KAAxB,CAAjB;;AASA,WACE,8BAAC,sBAAD;AACE,eAASQ,OADX;AAEE,gBAAUG,QAFZ;AAGE,YAAM,8BAAC,qBAAD;AAHR,MADF;AAOD,G;;OAEDc,I,GAAO,Y;OAEPC,M,GAAS;AACPC,+BACG3B,UADH,EACgB,0BAAY,YAAZ,CADhB;AADO,G;OAMT4B,O,GAAU,CACR,mCAAuB;AACrBR,UAAMpB,UADe;AAErB6B,iBAAa,KAAK1B;AAFG,GAAvB,CADQ,C;OAOV2B,c,GAAiB,CAAC,KAAKzB,MAAN,C;;OAEjB0B,W,GAAc,UAACC,EAAD,EAAKC,IAAL,EAAc;AAC1B,YAAQD,GAAGE,OAAH,CAAWC,WAAX,EAAR;AACE,WAAK,YAAL;AACE,eAAO;AACLC,kBAAQ,OADH;AAELhB,gBAAMpB,UAFD;AAGL2B,iBAAOM,KAAKD,GAAGK,UAAR;AAHF,SAAP;AAFJ;AAQD,G;;OAEDC,S,GAAY,UACVF,MADU,EAEVG,QAFU,EAGP;AACH,QAAIH,OAAOA,MAAP,KAAkB,OAAtB,EAA+B;AAC7B;AACD;AACD,YAAQA,OAAOhB,IAAf;AACE,WAAKpB,UAAL;AACE,eACE;AAAA;AAAA,YAAY,OAAO,EAAEwC,WAAWJ,OAAOK,IAAP,CAAYC,GAAZ,CAAgB,OAAhB,CAAb,EAAnB;AACGH;AADH,SADF;AAFJ;AAQD,G;;OAEDI,U,GAAa,iBAAS;AACpB,YAAQzC,MAAM0C,IAAN,CAAWxB,IAAnB;AACE,WAAKpB,UAAL;AAAiB;AACf,iBACE;AAAA;AAAA,cAAY,OAAO,EAAEwC,WAAWtC,MAAM0C,IAAN,CAAWH,IAAX,CAAgBC,GAAhB,CAAoB,OAApB,CAAb,EAAnB;AACGxC,kBAAMqC;AADT,WADF;AAKD;AAPH;AASD,G;;;kBAzGkBtC,gB","file":"blockquote.js","sourcesContent":["/*\r\n * This file is part of ORY Editor.\r\n *\r\n * ORY Editor is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * ORY Editor is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with ORY Editor.  If not, see <http://www.gnu.org/licenses/>.\r\n *\r\n * @license LGPL-3.0\r\n * @copyright 2016-2018 Aeneas Rekkas\r\n * @author Aeneas Rekkas <aeneas+oss@aeneas.io>\r\n *\r\n */\r\n\r\n/* eslint-disable prefer-reflect, default-case, react/display-name */\r\nimport BlockquoteIcon from '@material-ui/icons/FormatQuote'\r\nimport React from 'react'\r\nimport createBlockquotePlugin from 'slate-edit-blockquote'\r\n\r\nimport { makeTagNode, ToolbarButton } from '../helpers'\r\nimport Plugin from './Plugin'\r\nimport type { Props } from './props'\r\n\r\nexport const BLOCKQUOTE = 'BLOCKQUOTE/BLOCKQUOTE'\r\n\r\nexport default class BlockquotePlugin extends Plugin {\r\n  constructor(props: Props) {\r\n    super(props)\r\n\r\n    this.DEFAULT_NODE = props.DEFAULT_NODE\r\n  }\r\n\r\n  // eslint-disable-next-line react/display-name\r\n  Button = ({ editorState, onChange }: Props) => {\r\n    const onClick = e => {\r\n      e.preventDefault()\r\n\r\n      const isActive = editorState.blocks.some(block =>\r\n        Boolean(\r\n          editorState.document.getClosest(\r\n            block.key,\r\n            parent => parent.type === BLOCKQUOTE\r\n          )\r\n        )\r\n      )\r\n\r\n      let change = editorState.change()\r\n\r\n      if (isActive) {\r\n        change = change.unwrapBlock(BLOCKQUOTE)\r\n      } else {\r\n        change = change.wrapBlock(BLOCKQUOTE)\r\n      }\r\n\r\n      onChange({ value: change.value })\r\n    }\r\n\r\n    const isActive = editorState.blocks.some(block =>\r\n      Boolean(\r\n        editorState.document.getClosest(\r\n          block.key,\r\n          parent => parent.type === BLOCKQUOTE\r\n        )\r\n      )\r\n    )\r\n\r\n    return (\r\n      <ToolbarButton\r\n        onClick={onClick}\r\n        isActive={isActive}\r\n        icon={<BlockquoteIcon />}\r\n      />\r\n    )\r\n  }\r\n\r\n  name = 'blockquote'\r\n\r\n  schema = {\r\n    nodes: {\r\n      [BLOCKQUOTE]: makeTagNode('blockquote')\r\n    }\r\n  }\r\n\r\n  plugins = [\r\n    createBlockquotePlugin({\r\n      type: BLOCKQUOTE,\r\n      typeDefault: this.DEFAULT_NODE\r\n    })\r\n  ]\r\n\r\n  toolbarButtons = [this.Button]\r\n\r\n  deserialize = (el, next) => {\r\n    switch (el.tagName.toLowerCase()) {\r\n      case 'blockquote':\r\n        return {\r\n          object: 'block',\r\n          type: BLOCKQUOTE,\r\n          nodes: next(el.childNodes)\r\n        }\r\n    }\r\n  }\r\n\r\n  serialize = (\r\n    object: { type: string, object: string, data: any },\r\n    children: any[]\r\n  ) => {\r\n    if (object.object !== 'block') {\r\n      return\r\n    }\r\n    switch (object.type) {\r\n      case BLOCKQUOTE:\r\n        return (\r\n          <blockquote style={{ textAlign: object.data.get('align') }}>\r\n            {children}\r\n          </blockquote>\r\n        )\r\n    }\r\n  }\r\n\r\n  renderNode = props => {\r\n    switch (props.node.type) {\r\n      case BLOCKQUOTE: {\r\n        return (\r\n          <blockquote style={{ textAlign: props.node.data.get('align') }}>\r\n            {props.children}\r\n          </blockquote>\r\n        )\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}
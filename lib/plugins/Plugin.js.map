{"version":3,"sources":["../../src/plugins/Plugin.js"],"names":["Plugin","plugins","onKeyDown","e","data","state","hoverButtons","toolbarButtons"],"mappings":";;;;;;AAwBA;;;;;;0JAxBA;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;AAGA;;;IAGqBA,M;;;OAiBnBC,O,GAAoB,E;;OAuBpBC,S,GAAY,UACVC,CADU,EAEVC,IAFU,EAGVC,KAHU;AAAA,WAID,IAJC;AAAA,G;;OASZC,Y,GAAqC,E;OAKrCC,c,GAAuC,E;;AArDvC;;;;;AAKA;;;;;AAQA;;;;;AAKA;;;;;AAQA;;;;;AAKA;;;;;;;;;;AAcA;;;;;AAKA;;;;;AAKA;;;;;AAKA;;;;;kBA7DmBP,M","file":"Plugin.js","sourcesContent":["/*\r\n * This file is part of ORY Editor.\r\n *\r\n * ORY Editor is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *  \r\n * ORY Editor is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *  \r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with ORY Editor.  If not, see <http://www.gnu.org/licenses/>.\r\n *\r\n * @license LGPL-3.0\r\n * @copyright 2016-2018 Aeneas Rekkas\r\n * @author Aeneas Rekkas <aeneas+oss@aeneas.io>\r\n *\r\n */\r\n\r\n// @flow\r\n/* eslint-disable no-unused-vars */\r\nimport React, { Component } from 'react'\r\n\r\n/**\r\n * @class this is the base class for slate plugins\r\n */\r\nexport default class Plugin {\r\n  /**\r\n   * @member a unique identifier of the plugin\r\n   */\r\n  name: string\r\n\r\n  /**\r\n   * @member the schema that is automatically collected from all plugins\r\n   */\r\n  schema: {\r\n    nodes?: { [key: string]: Component<*, *, *> },\r\n    marks?: { [key: string]: Component<*, *, *> }\r\n  }\r\n\r\n  /**\r\n   * @member the slate plugins added to the editor\r\n   */\r\n  plugins: Array<*> = []\r\n\r\n  /**\r\n   * @member serialize a plugin's state to html\r\n   */\r\n  serialize: (\r\n    object: { object: string, type: string, data: any },\r\n    children: any[]\r\n  ) => any\r\n\r\n  /**\r\n   * @member serialize a plugin's state from html\r\n   */\r\n  deserialize: (el: Element, next: Function) => any\r\n\r\n  /**\r\n   * This handler is called when any key is pressed\r\n   *\r\n   * @param e the keydown event\r\n   * @param data utilities for hotkey logic\r\n   * @param state the current editor state\r\n   * @returns the new editor state if the plugin handles the hotkey\r\n   */\r\n  onKeyDown = (\r\n    e: Event,\r\n    data: { key: string, isMod: boolean, isShift: boolean },\r\n    state: any\r\n  ): ?any => null\r\n\r\n  /**\r\n   * @member the buttons to be added to the hover menu\r\n   */\r\n  hoverButtons: Component<*, *, *>[] = []\r\n\r\n  /**\r\n   * @member the buttons to be added to the global toolbar\r\n   */\r\n  toolbarButtons: Component<*, *, *>[] = []\r\n\r\n  /**\r\n   * @member the function that renders marks\r\n   */\r\n  renderMark: Function\r\n\r\n  /**\r\n   * @member the function that renders nodes\r\n   */\r\n  renderNode: Function\r\n}\r\n"]}